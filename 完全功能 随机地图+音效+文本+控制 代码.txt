#include <LiquidCrystal.h>
#include <string.h> // 包含 memcpy 函数声明(适用于地图矩阵的数据迁移)

// -------------------- LCD 定义 --------------------
LiquidCrystal lcd(38, 39, 40, 41, 42, 43);

// -------------------- 引脚定义 --------------------
#define VRX A0
#define VRY A1
#define SW  31
#define BUZZER_PIN 48  // 有源蜂鸣器引脚
#define RED_BTN 22
#define WHITE_BTN 24

// -------------------- LED 矩阵行、列引脚 --------------------
int rows[8] = {2, 3, 4, 5, 6, 7, 8, 9};      
int cols[8] = {10, 11, 12, 13, 14, 15, 16, 17}; 

// -------------------- 迷宫地图（8×16） --------------------
/*
1: 墙壁，0: 空地，2: 宝物，3: 出口，4: 陷阱。
示例将陷阱放在 (2,14)，宝物在 (6,1)，出口在 (6,14)。
你可自由调整这三类物件的位置。
*/
int maze[8][16];

int maze1[8][16] = {
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
    {1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1},
    {1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 4, 1}, // (2,14) 陷阱
    {1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
    {1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1},
    {1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1},
    {1, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 1}, // (6,1) 宝物, (6,14) 出口
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
};
int maze2[8][16] = {
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
    {1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1},
    {1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 4, 1}, // (2,14) 陷阱
    {1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1},
    {1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 3, 0, 0, 1}, // (4,12) 出口
    {1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1},
    {1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // (6,4) 宝物 
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
};

// -------------------- 玩家 & 摄像机参数 --------------------
int playerX = 1;       // 玩家初始列
int playerY = 1;       // 玩家初始行
int windowStartX = 0;  // 可视区域的左上角列(0~8)

// -------------------- 闪烁相关（物件） --------------------
unsigned long lastTreasureToggle = 0;
unsigned long lastExitToggle     = 0;
unsigned long lastTrapToggle     = 0;

// 闪烁周期(毫秒)
const unsigned long TREASURE_INTERVAL = 700;  // 宝物(2)
const unsigned long EXIT_INTERVAL     = 500;  // 出口(3)
const unsigned long TRAP_INTERVAL     = 1000; // 陷阱(4)

// 闪烁开关
bool treasureOn = true;
bool exitOn     = true;
bool trapOn     = true;

// -------------------- 玩家可选闪烁 --------------------
unsigned long lastPlayerFlash = 0;
bool isPlayerVisible = true;
const unsigned long PLAYER_FLASH_INTERVAL = 200;

// -------------------- 移动 & 刷新节流 --------------------
unsigned long lastMoveTime = 0;    
const unsigned long moveInterval = 300;

unsigned long lastRefreshTime = 0; 
const unsigned long refreshInterval = 2; // 行扫描的微小延时

// -------------------- 显示缓冲 (8×8) --------------------
int displayBuffer[8][8] = {0};

// -------------------- 按钮检测变量 --------------------
int lastRedState      = HIGH; 
int currentRedState   = HIGH;
int lastWhiteState    = HIGH;
int currentWhiteState = HIGH;

// -------------------- 蜂鸣器非阻塞控制 --------------------
bool isBeeping = false;
unsigned long beepStart = 0;
const unsigned long beepDuration = 40;

// -------------------- 游戏状态 --------------------
bool gameOver = false;
bool gameWin = false;
bool load = false;      // 有无找到宝藏

// ----------------------------------------------------
//  函数声明
// ----------------------------------------------------
void handleBlink(unsigned long now);
void updatePlayerPosition();
void updateWindowAnchor();
void updateDisplayBuffer();
void refreshLED();
void clearRowAndCols();
void checkInteraction();
void beepBuzzer(); 
void updateBuzzer();
void checkGameState();
int (*randomMap())[16];

// ----------------------------------------------------
//  Arduino 系统初始化
// ----------------------------------------------------
void setup() {
    Serial.begin(9600);
    Serial.println("Game Initialized.");

    // LCD 初始化
    lcd.begin(16, 2);
    lcd.clear();
    lcd.print("Loading...");
    delay(1000);
    lcd.clear();

    // 蜂鸣器引脚
    pinMode(BUZZER_PIN, OUTPUT);
    digitalWrite(BUZZER_PIN, LOW);

    // 摇杆 & 按钮
    pinMode(VRX, INPUT);
    pinMode(VRY, INPUT);
    pinMode(SW, INPUT_PULLUP);
    pinMode(RED_BTN,   INPUT_PULLUP);
    pinMode(WHITE_BTN, INPUT_PULLUP);

    // 选择地图矩阵
    int (*selectedMaze)[16] = randomMap();  // 获取随机选择的地图
    memcpy(maze, selectedMaze, sizeof(maze));  // 将地图数据复制到全局 maze
    
    // LED 矩阵初始化
    for (int i = 0; i < 8; i++) {
        pinMode(rows[i], OUTPUT);
        pinMode(cols[i], OUTPUT);
        digitalWrite(rows[i], LOW);
        digitalWrite(cols[i], HIGH);
    }

    // 清屏
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Ready!");
    delay(500);
    lcd.clear();

    // 设置游戏目标
    lcd.setCursor(0, 0);
    lcd.print("FindOut Treasure");
    lcd.setCursor(0, 1);
    lcd.print("And escape maze");
}
int test = 0;//限制测试的总次数
const unsigned long MAX_TEST = 500;
// ----------------------------------------------------
//  主循环
// ----------------------------------------------------
void loop() {
    unsigned long now = millis();

    if (gameOver || gameWin) {
        // 游戏结束或胜利，停止进一步操作
        while (true) {
            // 可添加闪烁“GAME OVER”或“YOU WIN”文字的逻辑
            // 这里只简单循环，保持显示

            // 按下白色按钮，重启游戏
            checkInteraction();
            if (!gameOver && !gameWin) {break;}
        }
    }

    // 1) 刷新物件闪烁
    handleBlink(now);

    // 2) 玩家是否闪烁 (可去掉此功能, 如不想让玩家闪烁)
    if (now - lastPlayerFlash >= PLAYER_FLASH_INTERVAL) {
        lastPlayerFlash = now;
        isPlayerVisible = !isPlayerVisible;
        if (test <= MAX_TEST){
          Serial.println("blink");
          test += 1;}
    }

    // 3) 移动判定
    if (now - lastMoveTime >= moveInterval) {
        lastMoveTime = now;
        updatePlayerPosition(); 
        updateWindowAnchor();
    }

    // 4) 更新蜂鸣器状态（非阻塞）
    updateBuzzer();

    // 5) 更新显示缓冲
    updateDisplayBuffer();

    // 6) **多次刷新** LED，增加刷新频率以减少闪烁
    for (int i = 0; i < 3; i++) { // 可根据需要调整刷新次数
        refreshLED();
    }

    // 7) 检测与红色&白色按钮的交互 (如显示信息等)
    checkInteraction();
}

// ----------------------------------------------------
//  1) 物件闪烁控制
// ----------------------------------------------------
void handleBlink(unsigned long now) {
    // 宝物(2)
    if (now - lastTreasureToggle >= TREASURE_INTERVAL) {
        lastTreasureToggle = now;
        treasureOn = !treasureOn;
    }
    // 出口(3)
    if (now - lastExitToggle >= EXIT_INTERVAL) {
        lastExitToggle = now;
        exitOn = !exitOn;
    }
    // 陷阱(4)
    if (now - lastTrapToggle >= TRAP_INTERVAL) {
        lastTrapToggle = now;
        trapOn = !trapOn;
    }
}

// ----------------------------------------------------
//  2) 更新玩家位置 & 碰撞检测
// ----------------------------------------------------
void updatePlayerPosition() {
    int xValue = analogRead(VRX);
    int yValue = analogRead(VRY);
    int buttonState = digitalRead(SW);

    int oldX = playerX;
    int oldY = playerY;

    // 计算新位置
    int newX = playerX;
    int newY = playerY;

    if (xValue < 400 && newX > 0)     newX--;
    if (xValue > 600 && newX < 15)    newX++;
    if (yValue < 400 && newY > 0)     newY--;
    if (yValue > 600 && newY < 7)     newY++;

    // 如果前方不是墙壁(1)则更新位置
    if (maze[newY][newX] != 1) {
        playerX = newX;
        playerY = newY;
    }

    // 如果玩家真的移动了，就短暂蜂鸣
    if (playerX != oldX || playerY != oldY) {
        beepBuzzer(); 
    }

    // 可选：检测按钮按下
    if (buttonState == LOW) {
        Serial.println("摇杆按钮按下");
        // 可在此添加更多交互逻辑
    }

    // 检查是否触发游戏结束或胜利
    checkGameState();
}

// ----------------------------------------------------
//  3) 改进后的摄像机（锚点）逻辑
//     - 当玩家靠近可视区域右边界(第6列)就 windowStartX++
//     - 当玩家靠近可视区域左边界(第1列)就 windowStartX--
// ----------------------------------------------------
void updateWindowAnchor() {
    // 可视区域宽度=8，地图总宽=16 => windowStartX 范围: [0, 8]

    // 靠近右侧(第6列) => 向右滚动
    if (playerX >= windowStartX + 6 && windowStartX < (16 - 8)) {
        windowStartX++;
    }
    // 靠近左侧(第1列) => 向左滚动
    else if (playerX < windowStartX + 1 && windowStartX > 0) {
        windowStartX--;
    }
}

// ----------------------------------------------------
//  4) 根据 maze & 闪烁状态更新显示缓冲
// ----------------------------------------------------
void updateDisplayBuffer() {
    for (int row = 0; row < 8; row++) {
        for (int col = 0; col < 8; col++) {
            int mapX = windowStartX + col;
            int tile = maze[row][mapX];
            // 是否玩家所在格
            bool isPlayerHere = (row == playerY && mapX == playerX);

            if (isPlayerHere) {
                // 玩家始终显示，不闪烁
                // displayBuffer[row][col] = 1;
                // 或者根据需要进行闪烁
                displayBuffer[row][col] = (isPlayerVisible ? 1 : 0);
            }
            else {
                switch (tile) {
                    case 1: // 墙壁（常亮）
                        displayBuffer[row][col] = 1;
                        break;
                    case 2: // 宝物（0.7秒闪烁）
                        displayBuffer[row][col] = (treasureOn ? 1 : 0);
                        break;
                    case 3: // 出口（0.5秒闪烁）
                        displayBuffer[row][col] = (exitOn ? 1 : 0);
                        break;
                    case 4: // 陷阱（1秒闪烁）
                        displayBuffer[row][col] = (trapOn ? 1 : 0);
                        break;
                    default: // 空地 (0)
                        displayBuffer[row][col] = 0;
                        break;
                }
            }
        }
    }
}

// ----------------------------------------------------
//  5) 刷新 LED 矩阵 (行扫描)
//    - 多次调用可提高帧率, 减少“闪烁”
// ----------------------------------------------------
void refreshLED() {
    for (int r = 0; r < 8; r++) {
        clearRowAndCols();
        digitalWrite(rows[r], HIGH);  // 选通当前行

        for (int c = 0; c < 8; c++) {
            // displayBuffer[r][c] == 1 -> 亮灯 (列输出 LOW)
            digitalWrite(cols[c], (displayBuffer[r][c] == 1) ? LOW : HIGH);
        }
        // 延时越小，刷新越快，但过小可能导致LED显示不稳定
        delayMicroseconds(1000); // 1毫秒
    }
}

// ----------------------------------------------------
//  清空行列状态
// ----------------------------------------------------
void clearRowAndCols() {
    for (int i = 0; i < 8; i++) {
        digitalWrite(rows[i], LOW);
        digitalWrite(cols[i], HIGH);
    }
}

// ----------------------------------------------------
//  6) 检查与红色&白色按钮的简单交互 (示例)
// ----------------------------------------------------
void checkInteraction() {
    // 读取当前红色按钮
    currentRedState = digitalRead(RED_BTN);
    if (test <= MAX_TEST){
      Serial.println(lastRedState);
      Serial.println(currentRedState);
      test += 1;}

    // 读取当前白色按钮
    currentWhiteState = digitalRead(WHITE_BTN);

    // 检测从“未按下(HIGH)”到“按下(LOW)”
    bool redJustPressed = (lastRedState == HIGH && currentRedState == LOW);
    bool whiteJustPressed = (lastWhiteState == HIGH && currentWhiteState == LOW);

    if (redJustPressed) {
        // 简单示例：在 LCD 上显示一条信息
        lcd.clear();
        lcd.setCursor(0, 0);
        //lcd.print("Red Button Press!");
        Serial.println("[INFO] Red Button Pressed!");
        lcd.setCursor(0, 1);
        lcd.print((load ? "Treasure loaded" : "Nothing loaded"));
    }

    if (whiteJustPressed) {
        // 简单示例：在 LCD 上显示一条信息
        lcd.clear();
        lcd.setCursor(0, 0);
        //lcd.print("White Button Press!");
        Serial.println("[INFO] White Button Pressed!");
        lcd.setCursor(0, 1);
        lcd.print("Game Restart!");
        delay(1000);
        setup();     // 重置游戏
        
        // 重置玩家位置 & 目标
        playerX = 1;     
        playerY = 1;     
        windowStartX = 0;
        gameOver = false;
        gameWin = false;
        load = false;
    }

    // 更新状态
    lastRedState = currentRedState;
}

// ----------------------------------------------------
//  7) 蜂鸣器非阻塞短鸣 
// ----------------------------------------------------
void beepBuzzer() {
    digitalWrite(BUZZER_PIN, HIGH);
    beepStart = millis();
    isBeeping = true;
}

void updateBuzzer() {
    if (isBeeping && (millis() - beepStart >= beepDuration)) {
        digitalWrite(BUZZER_PIN, LOW);
        isBeeping = false;
    }
}

// ----------------------------------------------------
//  8) 检查游戏状态
//     - 游戏胜利或失败时显示信息并停止游戏
// ----------------------------------------------------
void checkGameState() {
    int currentTile = maze[playerY][playerX];

    if (currentTile == 3) { // 到达出口
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("YOU WIN!");
        Serial.println("[INFO] Player reached the exit!");
        gameWin = true;
    }

    if (currentTile == 4) { // 踩到陷阱
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("GAME OVER!");
        Serial.println("[INFO] Player stepped on a trap!");
        gameOver = true;
    }

    if (currentTile == 2) { // 收集宝物
        maze[playerY][playerX] = 0; // 拾取宝物
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Got Treasure!");
        Serial.println("[INFO] Player collected a treasure!");
        // 可在此添加分数更新逻辑
        load = true;  // 更新游戏状态
    }
}

// ----------------------------------------------------
//  9) 随机选择地图样式
// ----------------------------------------------------
int (*randomMap())[16] {
    int i = random(1, 3);
    switch (i) {
        case 1:
            return maze1;
        case 2:
            return maze2;
    }
}